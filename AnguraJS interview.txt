
AngularJS is an open-source JavaScript framework developed by Google. It is a structural framework for dynamic Web apps. It is easy to update and get information from your HTML document. It helps in writing a proper maintainable architecture, that can be tested at a client side code.

This framework is developed on MVC (Model-View-Controller) design pattern.
It provides full featured SPA (Single Page Application) framework.
It supports Dependency Injection.
It supports two-way data binding.
It provides routing features.
Testing was designed right from the beginning; so you can build robust tests.
For DOM manipulation, jqLite is built-in; which is kind of like the Mini-Me of jQuery.
Separation of the client side of an Application from the Server side.
The AngularJS framework uses Plain Old JavaScript Objects(POJO), it doesn’t need the getter or setter functions.

Explain Directives in AngularJS?
AngularJS directives are only used to extend HTML and DOM elements' behavior. These are the special attributes, that start with ng- prefix, that tell AngularJS's HTML compiler ($compile) to attach a specified behavior to that DOM element.
You can invoke a directive by using:
Element name
Attribute
Class
Comment
The legal restrict values are:
E for Element name
A for Attribute
C for Class
M for Comment
mainApp.directive('student', function() {
   //define the directive object
   var directive = {};
   
   //restrict = E, signifies that directive is Element directive
   directive.restrict = 'E';
   
   //template replaces the complete element with its text. 
   directive.template = "Student: <b>{{student.name}}</b> , Roll No: <b>{{student.rollno}}</b>";
   
   //scope is used to distinguish each student element based on criteria.
   directive.scope = {
      student : "=name"
   }
   
   //compile is called during application initialization. AngularJS calls it once when html page is loaded.
	
   directive.compile = function(element, attributes) {
      element.css("border", "1px solid #cccccc");
      
      //linkFunction is linked with each element with scope to get the element specific data.
      var linkFunction = function($scope, element, attributes) {
         element.html("Student: <b>"+$scope.student.name +"</b> , Roll No: <b>"+$scope.student.rollno+"</b><br/>");
         element.css("background-color", "#ff00ff");
      }
      return linkFunction;
   }
   return directive;
});




AngularJS has a set of built-in directives like
ngBind,
ngModel
ngClass
ngApp
ngInit
ngRepeat

What are expressions in AngularJS?
Expressions in AngularJS are just like JavaScript code snippets. JavaScript code is usually written inside double braces: {{expression}}. In other words, Angular Expressions are JavaScript code snippets with limited subset. Expressions are included in the HTML elements. 

What is $scope in AngularJS?
$scope in AngularJS is an object which refers to an application model
It is an object that binds view (DOM element) with the controller. In controller, model data is accessed via $scope object. As we know, AngularJS supports MV* pattern, $scope object becomes the model of MV*. 
Every AngularJS application has a $rootScope that is the top most scope created on the DOM element which contains the ng-app directive.

<script src="~/Script/angular.min.js"></script> 
<body ng-app="myapp">
<div ng-controller="ParentController">  
var app = angular.module("myapp", []);  
 app.controller("ParentController", function($scope)   
{$scope.parentName = "Parent Controller"; });  

What is SPA (Single page application) in AngularJS?
Single-Page Applications (SPAs) are web applications that load a single HTML page and dynamically update that page as the user interacts with the app. SPAs use AJAX and HTML to create fluid and responsive web apps, without constant page reloads. However, this means much of the work happens on the client side, in JavaScript.


How to implement routing in AngularJS? Explain $routeProvider in AngularJS?
var app = angular.module("AngularApp", ['ngRoute']);  
app.config(['$routeProvider',  
    function($routeProvider)  
    {  
        $routeProvider.  
        when('/page1',   
             {  
                templateUrl: 'Modules/Page1/page1.html',  
                controller: 'Page1Controller'  
            })  
            .  
        otherwise  
        ({  
            redirectTo: '/page1'  
        });  
    }  
]);  


What are the services in AngularJS?
In general services are functions that are responsible for specific tasks in an application. AngularJS services are designed based on two principles.
Lazily instantiated 
Angular only instantiates a service when an application component depends on it, using dependency injection 
Singletons
Each component is dependent on a service that gets a reference to the single instance generated by the service factory.
AngularJS provides many built in services, for example, $http, $route, $window, $location
The AngularJS Module defines three methods for defining services : factory, service and provider. The result of using these methods is the same – a service object 

What is a Factory method in AngularJS?
AngularJS Factory: the purpose of Factory is also the same as Service, however in this case we create a new object and add functions as properties of this object and at the end we return this object.
One major difference I see is that you can run custom code in the factory. But, in a service, only object creation happens.
module.factory( 'factoryName', function ); 

Explain Provider Method in AngularJS.
The Module.provider method allows you to take more control over the way that a service object is created or configured. The arguments to the provider method are the name of the service that is being defined and a factory function. The factory function is required to return a provider object that defines a method called $get, which in turn is required to return the service object. When the service is required, AngularJS calls the factory method to get the provider object and then calls the $get method to get the service object. Using the provider method doesn’t change the way that services are consumed, which means that I don’t need to make any changes to the controller or directive in the example.
The advantage of using the provider method is that you can add functionality to the provider method that can be used to configure the service object.
serviceApp.provider("logService", function()  

Explain what is Dependency Injection in AngularJS?
It is a software design pattern in which objects are passed as dependencies. It helps us to remove hard coded dependencies and makes dependencies configurable. Using Dependency Injection, we can make components maintainable, reusable and testable.
Separating the process of creation and consumption of dependencies.
It allows us to create independent development of the dependencies.
We can change the dependencies when required.
It allows injecting mock objects as dependencies for testing.
AngularJS uses dependency with several types
Value
Factory
Service
Provider
Constant
AppModule.controller("AppController", function($scope, $window, $log,$http)   
{   
  
});   

What is controller in AngularJS?
A controller is a set of JavaScript functions which is bound to a specified scope, the ng-controllerdirective. Angular will instantiate the new controller object, and injects the new scope as a dependency. It contains business logic for the view and avoids using controller to manipulate the DOM. 

What are the filters in AngularJS?
Filters are used to modify the data and can be added in expression or directives using a pipe character. A filter formats the value of an expression for display to the user. They can be used in view templates, controllers, or services, and we can easily create our own filter. Filter is a module provided by AngularJS. 
currency
date
filter
json
limitTo
lowercase
number
orderBy
uppercase
{{ x | lowercase }}

Explain Module And Controller In AngularJS.
AngularJS module is a container of all angular components like controller, services, directive, filter, config etc



ng-app directive 
is used to define AngularJS applications.
It designates the root element of AngularJS application 
We can define any number of ng-app directives inside the HTML document but only one AngularJS application can be bootstrapped automatically (auto-bootstrapped, with ng-app directive in the html tag, we can not use js code); 
the other applications needs to be bootstrapped manually(without ng-app directive in the html tag, But we will be initializing the app from JavaScript. 
var app = angular.module("app", []);  
angular.bootstrap(document.getElementById("container"), ["app"])   ). 


What is Representational State Transfer(REST) in AngularJS.
REST is a style of API that operates over HTTP requests. The requested URL identifies the data to be operated on, and the HTTP method identifies the operation that is to be performed. 
A web service is RESTful when :
It’s URL-based (e.g., http://www.micbutton.com/rs/blogPost).
It uses an Internet media type such as JSON for data interchange.
It uses standard HTTP methods (GET, PUT, POST, DELETE).

The $http service is used to make and process Ajax requests, which are standard HTTP requests that are performed asynchronously.
testApp.controller("ajaxController", function($scope, $http)  
{  
    $scope.loadData = function()  
    {  
        $http.get("data.json").success(function(data)  
        {  
            $scope.products = data;  
        });  
    }

Why to use AngularJS Global Object services?
The main reason that AngularJS includes these services is to make testing easier, but an important facet of unit testing is the need to isolate a small piece of code and test its behavior without testing the components it depends on—in essence, creating a focused test. The DOM API exposes functionality through global objects such as document and window. 

What is event handling in AngularJS?
AngularJS has a simple model for how to add event listeners. We can attach an event listener to an HTML element using one of the following AngularJS event listener directives.
ng-click
ng-dbl-click
ng-mousedown
ng-mouseup
ng-mouseenter
The event listener functions called are functions added to the $scope object by the controller function.

What is Constants in AngularJS?
Constant are like services in AngularJS in which we can define our global data. It is declared using "constant" keyword.
As we define our app-keys in Web.Config file for ASP.NET application, which further we can use anywhere in the application, likewise we can declare constant data in AngularJS globally that can be used throughout the application.
We can inject Constant everywhere in controller or service like any other dependency (e.g.$http).AngularJS uses Singleton structure for creating Constant dependency in our Angular application.
app.constant('config',  
{  
    appName: 'Constants',  
    appVersion: 2.0  
});  
Now, use the above to declare Constant in our controller,
app.controller('mainController', function ($scope,config) {   
 $scope.ApplicationName = config.appName;   
}   

What is ngClass directive in AngularJS?
Add/Remove classes based on Angular variables.
Add/Remove classes based on evaluated expressions.
Bind single or multiple classes based on dynamic data.
<div ng-class="{class1 : expression1, class2 : expression2}">  
    Hello World!  
</div>  

Why is scopeless controller used in AngularJS?
Sometimes controller become complex by using $scope for providing data and behavior to view, in that situation we can use scopeless controller. 
But if you have designed your AngularJS application perfectly, there is no need to go for scopeless controllers.
Creating scope-less controller
angular module(app.js):
angular.module('myApp', []);
var app = angular.module("myApp");  
app.controller("myController", function()   
{  
    this.title = 'scopeless Controller Test';  
    this.name = 'Anupam';  
    this.sayHello = function()   
    {  
        alert('Hello ' + this.name);  
    }  
}); 
<html ng-app="myApp" ng-controller="myController as ctrl">  
<div class="well-lg">  
                    Hi {{ctrl.name}}  
                </div>  


Îñíîâíîé ôîðìîé îðãàíèçàöèè ïðèëîæåíèé â AngularJS ÿâëÿþòñÿ ìîäóëè. Ìîäóëü ïðåäñòàâëÿåò õðàíèëèùå ðàçëè÷íîé èíôîðìàöèè: äèðåêòèâ, ôèëüòðîâ, êîíòðîëëåðîâ è ò.ä. Ïðè ýòîì îäíî ïðèëîæåíèå ìîæåò èìåòü íåñêîëüêî ìîäóëåé. Íàïðèìåð, ðàçíûå ìîäóëè ìîãóò ïðåäñòàâëÿòü êàêóþ-ëèáî ñïåöèôè÷åñêóþ ôóíêöèîíàëüíîñòü.

Äëÿ ñîçäàíèÿ ìîäóëÿ èñïîëüçóåòñÿ ìåòîä angular.module(). Ýòîò ìåòîä ïðèíèìàåò òðè ïàðàìåòðà, äâà èç êîòîðûõ ÿâëÿþòñÿ îáÿçàòåëüíûìè:
Íàçâàíèå ìîäóëÿ. Ñîãëàñíî ñîãëàøåíèÿì î íàèìåíîâàíèè ìîäóëü äîëæåí èìåòü ñóôôèêñ App
Íàáîð äðóãèõ ìîäóëåé â âèäå ñòðîêîâîãî ìàññèâà, îò êîòîðûõ äàííûé ìîäóëü çàâèñèò
Êîíôèãóðàöèîííûå íàñòðîéêè ìîäóëÿ
Â êà÷åñòâå ðåçóëüòàòà ìåòîä angular.module() âîçâðàùàåò îáúåêò Module.
Äëÿ ñîçäàíèÿ ìîäóëÿ èñïîëüçóåòñÿ ìåòîä angular.module(). Ýòîò ìåòîä ïðèíèìàåò òðè ïàðàìåòðà, äâà èç êîòîðûõ ÿâëÿþòñÿ îáÿçàòåëüíûìè:
var myApp = angular.module('myApp', []);

Èñïîëüçóÿ ìîäóëü, ìû ìîæåì îïðåäåëèòü ðÿä êîìïîíåíòîâ, òàêèõ êàê êîíòðîëëåðû, ñåðâèñû è ò.ä., êîòîðûå çàòåì ïðèìåíÿþòñÿ â ïðèëîæåíèè. Äëÿ ýòîãî îáúåêò Module èìååò ðÿä ìåòîäîâ, íàèáîëåå èñïîëüçóåìûå èç íèõ:
config(callback): ðåãèñòðèðóåò ôóíêöèþ callback, êîòîðàÿ èñïîëüçóåòñÿ äëÿ åãî êîíôèãóðàöèè â ïðîöåññå çàãðóçêè
constant(key, value): îïðåäåëÿåò ñåðâèñ, êîòîðûé âîçâðàùàåò êîíñòàíòíîå çíà÷åíèå value
controller(name, constructor): ñîçäàåò êîíòðîëëåð
directive(name, factory): ñîçäàåò äèðåêòèâó, êîòîðàÿ ðàñøèðÿåò ñòàíäàðòíóþ ðàçìåòêó html
factory(name, provider): ñîçäàåò ñëóæáó
filter(name, factory): ñîçäàåò ôèëüòð
provider(name, type): ñîçäàåò ñåðâèñ
service(name, constructor): ñîçäàåò ñåðâèñ

Êîíòðîëëåð
Â Angular êîíòðîëëåð ÿâëÿåòñÿ ôóíêöèåé - äëÿ ðàñøèðåíèÿ ýêçåìïëÿðîâ îáëàñòåé âèäèìîñòè, çà èñêëþ÷åíèåì êîðíåâîé îáëàñòè
ñîçäàíèå êîíòðîëëåðà
myApp.controller("phonesController", function ($scope) {
    // íàñòðîéêà êîíòðîëëåðà
});

êîíòðîëëåð
|
V
ñêîóðå
^
|
V
âüþ

Îáúåêò $scope
Îáúåêò $scope ñëóæèò ñâÿçóþùèì çâåíîì ìåæäó ïðåäñòàâëåíèåì â âèäå êîäà html è êîíòðîëëåðîì. Îáúåêò $scope âûïîëíÿåò ðîëü ìîäåëè ïðèëîæåíèÿ.
Êàæäîå ïðèëîæåíèå AngularJS èìååò îäèí îáúåêò $rootScope, êîòîðûé ÿâëÿåòñÿ ðîäèòåëüñêèì ïî îòíîøåíèþ êî âñåì îñòàëüíûì îáúåêòàì $scope, êîòîðûå èñïîëüçóþòñÿ â êîíòðîëëåðàõ. È ïðè çàïóñêå ïðèëîæåíèÿ ñîçäàåòñÿ ïðèâÿçêà ýëåìåíòà, â êîòîðîì èñïîëüçóåòñÿ äèðåêòèâà ng-app, ê îáúåêòó $rootScope.

äèðåêòèâà ng-app ïðèâÿçûâàåòñÿ ê îáúåêòó $rootScope

Äèðåêòèâà ng-controller ñîçäàåò íîâûé îáúåêò $scope, êîòîðûé ÿâëÿåòñÿ äî÷åðíèì ïî îòíîøåíèþ ê ãëîáàëüíîìó $rootScope è êîòîðûé ïåðåîïðåäåëÿåò åãî äåéñòâèå. Â òî æå âðåìÿ îáëàñòü äåéñòâèÿ îáúåêòà $scope, óñòàíîâëåííîãî â êîíòðîëëåðå, çàäàåòñÿ òîëüêî ýòèì áëîêîì div, è âíå åãî $scope óæå íå äåéñòâóåò.

Äèðåêòèâà
Äèðåêòèâû îïèñûâàþò èçìåíåíèå ïîâåäåíèÿ èëè ïðåîáðàçîâàíèå DOM ìîäåëè, ñâÿçàííîå ñ ïîëüçîâàòåëüñêèì àòðèáóòîì, èìåíåì ýëåìåíòà, èëè css êëàññîì. Äèðåêòèâû ïîçâîëÿþò ðàñøèðèòü HTML-ñèíòàêñèñ â äåêëàðàòèâíîé ôîðìå.
êàñòîìíàÿ äèðåêòèâà
questApp.directive("answerList", function () {
    return function (scope, element, attrs) {
        var data = scope[attrs["answerList"]];
        if (angular.isArray(data.answers)) {
            var ulElem = angular.element("<ul>");
            element.append(ulElem);
            for (var i = 0; i < data.answers.length; i++) {
                var liElem = angular.element('<li>');
                liElem.append(angular.element('<p>').text(data.answers[i].text));
                ulElem.append(liElem);
            }
        }
    }
});
òåïåðü òîæå íî áîëåå ðàñøèðåííî
questApp.directive("answerList", function () {
    return {
        link: function (scope, element, attrs) {
         
            var data = scope[attrs["answerList"] ||attrs["source"]];
             
            if (angular.isArray(data.answers)) {
òóò ìíîãî êîäà äëÿ ñîçäàíèÿ âñòàâêè ýëåìåíòîâ ñ ïîìîùüþ äæàâàñêðèïò
                }
            }
        },
        restrict: "EACM"
    }
});
òåïåðü òîæå íî ñ øàáëîíîì
questApp.directive("answerList", function () {
    return {
        link: function (scope, element, attrs) {
         
            scope.data = scope[attrs["answerList"]];
        },
        restrict: "A",
        template: "<div class='answers'>" +
        "<div ng-repeat='answer in data.answers' class='answer'>" +
            "<div class='vote'>" +
            "<a class='vote-up' ng-click='voteUp(answer)'></a>" +
            "<span class='rate'>{{answer.rate}}</span>" +
            "<a class='vote-down' ng-click='voteDown(answer)'></a>" +
        "</div>" +
        "<b>{{answer.text}}</b>" +
        "<p>{{answer.author}}</p>" +
        "<p><i>{{answer.date}}</i></p>" +
    "</div></div>"
    }
});
òîæå ñàìîå ñ âíåäðåíèåì øàáëîíîâ
questApp.directive("answerList", function () {
    return {
        restrict: "A",
        templateUrl: "templates/answersTemplate.html",
        transclude: true
    }
});
Ñâîéñòâî link ïîçâîëÿåò çàäàòü ôóíêöèþ äèðåêòèâû. À ñâîéñòâî 
restrict ïîçâîëÿåò óêàçàòü îáúåêò, ê êîòîðîìó äèðåêòèâà áóäåò ïðèìåíÿòüñÿ. Îíî ìîæåò èìåòü ñëåäóþùèå çíà÷åíèÿ:
E: äèðåêòèâà ïðèìåíÿåòñÿ ê ýëåìåíòó
A: äèðåêòèâà ïðèìåíÿåòñÿ ê àòðèáóòó
C: äèðåêòèâà ïðèìåíÿåòñÿ ê êëàññó
M: äèðåêòèâà ïðèìåíÿåòñÿ ê êîììåíòàðèþ
template - ýòî ïðèâÿçêà øàáëîíà
compile - òóò ïðèâÿçûâàåòñÿ ôóíêöèÿ êîòîðàÿ âûçâàåòñÿ îäèí AngularJS calls it once when html page is loaded
transclusion - âíåäðÿåò øàáëîíû èç âíå, ò.å. èç âíåøíåãî ôàéëà.


Ôèëüòðû 
Ôèëüòðû ïîçâîëÿþò ïðîâåñòè íåêîòîðóþ ïðåäîáðàáîòêó ïåðåä âûâîäîì äàííûõ íà ñòðàíèöó, íàïðèìåð, îòñîðòèðîâàòü èëè êàê-òî èçìåíèòü íàáîð äàííûõ.
{{question.text | lowercase}}
êàñòîìíûé ôèëüòð
questApp.filter('formatText', function(){
    return function(text){
        if(text.indexOf("ôèãàñå")!==-1){
            return "***";
        }
        else{
            return text;
        }
    }
})

Ñåðâèñû
ñèíòàêñèñ
questApp.factory('dataService', function(){
Ñåðâèñû AngularJS ïðåäñòàâëÿþò ñïåöèàëüíûå îáúåêòû èëè ôóíêöèè, âûïîëíÿþùèå íåêîòîðûå îáùèå äëÿ âñåãî ïðèëîæåíèÿ çàäà÷è. Â AngularJS èìåþñÿ ðÿä âñòðîåííûõ ñåðâèñîâ, òàêèå êàê $http, $q è ðÿä äðóãèõ. Êðîìå òîãî, èìååòñÿ âîçìîæíîñòü ñîçäàâàòü ñâîè ñåðâèñû äëÿ âûïîëíåíèÿ ñïåöèôè÷åñêèõ çàäà÷.
-$compile ïðåäñòàâëÿåò ôóíêöèþ, ãåíåðèðóþùóþ êîíòåíò èç ôðàãìåíòîâ html. ×òîáû íàïîëíèòü êîíòåíò äàííûìè èç êîíòðîëëåðà, â ôóíêöèþ ïåðåäàåòñÿ ïàðàìåòð scope: compileFn(scope);
Çàïðîñû
$http({
  method: 'GET',
  url: '/someUrl'
}).then(function successCallback(response) {    
  }, function errorCallback(response) {       
  });
$q
var deferred = $q.defer();
Ñóòü ñîçäàíèÿ deferred-îáúåêòà çàêëþ÷àåòñÿ â òîì, ÷òî îí ðàñêðûâàåò, âî-ïåðâûõ, api ïî âûïîëíåíèþ îïåðàöèé. À âî-âòîðûõ, îí ñîäåðæèò àññîöèèðîâàííûé promise-îáúåêò, è ÷åðåç deferred-îáúåêò ìû âçàèìîäåéñòâóåì ñ promise-îáúåêòîì. ×òîáû ïîëó÷èòü promise-îáúåêò, â ñàìîì êîíöå ôóíêöèè èñïîëüçóåòñÿ ñëåäóþùåå âûðàæåíèå return deferred.promise.
$anchorScroll: ïåðåìåùàåò ïîëîñó ïðîêðóòêè ê îïðåäåëåííîé ññûëêå íà ñòðàíèöå
$document: ïðåäîñòàâëÿåò îáúåêò jqLite, êîòîðûé ñîäåðæèò ñòàíäàðòíûé îáúåêò window.document
$interval: ïðåäñòàâëÿåò îáåðòêó âîêðóã ôóíêöèè window.setInterval
$location: ïðåäîñòàâëÿåò äîñòóï ê URL
$window: ïðåäîñòàâëÿåò ñòàíäàðòíûé javascript-îáúåêò window
$sce: óäàëÿåò ïîòåíöèàëüíî îïàñíûå ýëåìåíòû è àòðèáóòû èç êîäà html
$sanitize: çàìåíÿåò ïîòåíöèàëüíî îïàñíûå ñèìâîëû ýñêåéï-ïîñëåäîâàòåëüíîñòÿìè

Ìàðøðóòèçàöèÿ
var questApp = angular.module('questApp', ["ngRoute"])
    .config(function($routeProvider){
        $routeProvider.when('/question',
        {
            templateUrl:'views/question.html',
            controller:'QuestionController'
        });
        $routeProvider.when('/answer',
        {
            templateUrl:'views/answer.html',
            controller:'AnswerController'
        });
        $routeProvider.when("/edit/:id", {
            templateUrl: "views/answer.html",
            controller:'AnswerController'
        });
        $routeProvider.when("/edit/:id/:data*", {
            templateUrl: "views/answer.html",
            controller:'AnswerController'
        });
        $routeProvider.otherwise({redirectTo: '/question'});
});
$route ìû ìîæåì óïðàâëÿòü òåêóùèì ìàðøðóòîì. Ñåðâèñ $route èìååò íåñêîëüêî ñâîéñòâ è ìåòîäîâ, ïîçâîëÿþùèõ óïðàâëÿòü ìàðøðóòîì:
current: âîçâðàùàåò îáúåêò, êîòîðûé ñîäåðæèò èíôîðìàöèþ î òåêóùåì ìàðøðóòå
reload(): ïåðåçàãðóæàåò ïðåäñòàâëåíèå äëÿ òåêóùåãî ìàðøðóòà
routes: âîçâðàùàåò êîëëåêöèþ ìàðøðóòîâ, îïðåäåëåííûõ ÷åðåç $routeProvider
×òîáû çàôèêñèðîâàòü ïåðåõîä îò îäíîãî ìàðøðóòà ê äðóãîìó, ìû ìîæåì îáðàáàòûâàòü ñîáûòèÿ, îïðåäåëåííûå â ñåðâèñå $route:
$routeChangeStart: ñîáûòèå ñðàáàòûâàåò ïåðåä èçìåíåíèåì ìàðøðóòà
$routeChangeSuccess: ñîáûòèå ñðàáàòûâàåò ïîñëå èçìåíåíèÿ ìàðøðóòà
$routeUpdate: ñîáûòèå ñðàáàòûâàåò ïðè îáíîâëåíèè ìàðøðóòà
$routeChangeError: ñðàáàòûâàåò, åñëè ìàðøðóò íå ìîæåò áûòü èçìåíåí


Âíåäðåíèå çàâèñèìîñòåé è ñåðâèñ $injector
â ðåàëüíîì ïðîåêòå
todos.TodoCtrl.$inject
ýòî äîñòèãàåòñÿ ïóòåì òîãî ÷òî $inject ýòî ñòàòè÷åñêîå ñâîéñòâî íî ìîæíî ïèñàòü ïðÿìî TodoCtrl.$inject
public static $inject = [
			'$scope',
			'$rootScope'
		];

$injector. Åãî ðîëü ñîñòîèò â îïðåäåëåíèè è óñòàíîâêå çàâèñèìîñòåé, êîòîðûå èñïîëüçóþòñÿ ôóíêöèåé.
Ñâîþ ôóíêöèîíàëüíîñòü ñåðâèñ $injector ðåàëèçóåò ñ ïîìîùüþ ñëåäóþùèõ ìåòîäîâ:
annotate(fn): âîçâðàùàåò íàáîð çàâèñèìîñòåé äëÿ ôóíêöèè fn
get(name): âîçâðàùàåò êîíòðåòíóþ ðåàëèçàöèþ ñåðâèñà ïî îïðåäåëåííîìó íàçâàíèþ ñåðâèñà
has(name): âîçâðàùàåò true, åñëè äëÿ óêàçàííîãî îáúåêòà name óñòàíîâëåíà çàâèñèìîñòü
invoke(fn, self, locals): âûçûâàåò ôóíêöèþ fn. Ìîæåò ïðèíèìàòü äâà íåîáÿçàòåëüíûõ ïàðàìåòðà: self (ïîçâîëÿåò óñòàíîâèòü àðãóìåíò this äëÿ âûçûâàåìîé ôóíêöèè) è locals (ïðåäñòàâëÿåò àëüòåðíàòèâíûé ñïîñîá ïåðåäà÷è àðãóìåíòîâ â âûçûâàåìóþ ôóíêöèþ)
angular.module("myApp", []).controller("myController", function ($scope, $injector) {
    var counter = 0;
    var getData = function (dataService, message) {
        if (counter %2 == 0) {
            console.log(dataService.question);
        } 
        else {
            console.log(message);
        }
        counter++;
    }
    $scope.buttonClick = function () {
        var deps = $injector.annotate(getData);
        var args = [];
        for (var i = 0; i < deps.length; i++) {
            if ($injector.has(deps[i])) {
                args.push($injector.get(deps[i]));
                console.log("Ñåðâèñ: " + deps[i]);
            } 
            else if (deps[i] == "message") {
                args.push("Ïðèâåò ìèð");
                console.log("" + deps[i]);
            }
        }
        getData.apply(null, args);
    };
}).factory('dataService', function(){
    return{
        question:{
            text: 'Êàêîé js-ôðåéìâîðê ëó÷øå èñïîëüçîâàòü?',
            author: 'Èâàí Èâàíîâ',
            date: '20/10/2013'
        }
    };
});

















Ðàáîòà ñî ñòðóêòóðîé DOM
Íàâèãàöèÿ ïî ñòðàíèöå
Äëÿ íàâèãàöèè ïî html-ñòðàíèöå ìû ìîæåì ïðèìåíÿòü ðÿä ìåòîäîâ:
children(): âîçâðàùàåò íàáîð äî÷åðíèõ ýëåìåíòîâ
eq(index): âîçâðàùàåò ýëåìåíò ïî îïðåäåëåííîìó èíäåêñó èç êîëëåêöèè ýëåìåíòîâ
find(tag): ïîëó÷àåò âñå ýëåìåíòû ïî îïðåäåëåííîìó òåãó
next(): âîçâðàùàåò ñëåäóþùèé ñåñòðèíñêèé ýëåìåíò
parent(): âîçâðàùàåò ðîäèòåëüñêèé ýëåìåíò
html(): âîçâðàùàåò html-êîä ýëåìåíòà
text(): âîçâðàùàåò òåêñòîâîå ñîäåðæèìîå ýëåìåíòàÏîäîáíàÿ ôóíêöèîíàëüíîñòü ðåàëèçîâàíà ñ ïîìîùüþ ñïåöèàëüíîãî API, êîòîðîå âî ìíîãîì íàïîìèíàåò jQuery è íàçûâàåòñÿ jqLite (jQuery - lite)
Ìàíèïóëÿöèÿ ýëåìåíòàìè
addClass(name): äîáàâëÿåò ê ýëåìåíòó êëàññ
attr(name) / attr(name, value): ïîëó÷àåò çíà÷åíèå value àòðèáóòà name ýëåìåíòà è óñòàíàâëèâàåò åãî
css(name) / css(name, value): ïîëó÷àåò çíà÷åíèå value ñòèëÿ name ó ýëåìåíòà è óñòàíàâëèâàåò åãî
hasClass(name): âîçâðàùàåò true, åñëè ýëåìåíò èìååò êëàññ name
prop(name) / prop(name, value): ïîëó÷àåò çíà÷åíèå value ñâîéñòâàà name ýëåìåíòà è óñòàíàâëèâàåò åãî
removeAttr(name): óäàëÿåò ó ýëåìåíòà àòðèáóò
removeClass(name): óäàëÿåò ó ýëåìåíòà êëàññ
text(value): óñòàíàâëèâàåò òåêñòîâîå çíà÷åíèå ó ýëåìåíòà
toggleClass(name): ïåðåêëþ÷àåò êëàññ - êëàññ name äîáàâëÿåòñÿ, à âñå ðàíåå èìåâøèåñÿ êëàññû óäàëÿþòñÿ
val() / val(value): ïîëó÷àåò çíà÷åíèå àòðèáóòà value è óñòàíàâëèâàåò åãî çíà÷åíèå
Ñîçäàíèå è óäàëåíèå ýëåìåíòîâ
Ñëåäóþùèå ìåòîäû ïîçâîëÿþò óïðàâëÿòü ñîçäàíèåì è óäàëåíèåì ýëåìåíòîâ:
angular.element(html): ñîçäàåò îïðåäåëåííûé ýëåìåíò ñ êîäîì html
after(elements): äîáàâëÿåò ýëåìåíòû elements ïîñëå ýëåìåíòà, íà êîòîðîì âûçûâàåòñÿ äàííûé ìåòîä
append(elements): äîáàâëÿåò ýëåìåíòû elements â êà÷åñòâå äî÷åðíèõ â êîíåö ýëåìåíòà, íà êîòîðîì âûçûâàåòñÿ äàííûé ìåòîä
clone(): ñîçäàåò êîïèþ ýëåìåíòà, äëÿ êîòîðîãî âûçûâàåòñÿ ìåòîä
prepend(elements): äîáàâëÿåò ýëåìåíòû elements â êà÷åñòâå äî÷åðíèõ â íà÷àëî ýëåìåíòà, íà êîòîðîì âûçûâàåòñÿ äàííûé ìåòîä
remove(): óäàëÿåò ýëåìåíò
replaceWith(element): çàìåíÿåò ýëåìåíò, íà êîòîðîì âûçûâàåòñÿ ìåòîä, äðóãèì ýëåìåíòîì, êîòîðûé ïåðåäàåòñÿ â êà÷åñòâå ïàðàìåòðà
wrap(element): îáåðòûâàåò ýëåìåíò, íà êîòîðîì âûçûâàåòñÿ ìåòîä, íîâûì ýëåìåíòîì, ïåðåäàþùèìñÿ â êà÷åñòâå ïàðàìåòðà
Ðåãèñòðàöèÿ ñîáûòèé
jqLite ïîääåðæèâàåò ðåãèñòðàöèþ ñòàíäàðòíûõ ñîáûòèé javascript. Äëÿ ýòîãî îïðåäåëåíû ìåòîäû:
on(events, handler): ðåãèñòðèðóåò îáðàáîò÷èê äëÿ îäíîãî èëè íåñêîëüêèõ ñîáûòèé
off(events, handler): óäàëÿåò ðàíåå çàðåãèñòðèðîâàííûé îáðàáîò÷èê äëÿ íåñêîëüêèõ ñîáûòèé
triggerHandler(event): âûçûâàåò îáðàáîò÷èêè äëÿ ñîáûòèÿ


Äèðåêòèâû
1 ng-repeat ïîçâîëÿåò ïðîèçâîäèòü îáõîä ìàññèâîâ â ñòèëå öèêëà for-each
<li ng-repeat="phone in phones">
2 ng-bind: îñóùåñòâëÿåò ïðèâÿçêó ê ñâîéñòâó innerText html-ýëåìåíòà îäíîñòîðîííÿÿ ïðèâÿçêà<span ng-bind="phones.length">
3 ng-bind-html: ïîçâîëÿåò âûâîäèòü íà ñòðàíèöó html-ñîäåðæèìîå ñî âñåìè òåãàìè.
<p ng-bind-html="htmlcode"></p>
4 ng-bind-template ïîçâîëÿåò çàäàòü øàáëîí ïðèâÿçêè ñ èñïîëüçîâàíèåì âûðàæåíèé
<p ng-bind-template="{{phones[0].name}}: {{phones[0].price}} $"></p>
5 ng-model: ñîçäàåò äâóñòîðîííþþ ïðèâÿçêó
<input type="text" ng-model="property" />
6 ng-non-bindable: îïðåäåëÿåò ó÷àñòîê html-êîäà, â êîòîðîì ïðèâÿçêà íå áóäåò èñïîëüçîâàòüñÿ
<p ng-non-bindable>{{1 + 2}}</p>
7 ng-include ïîëó÷àåò ñ âåá-ñåðâåðà ôðàãìåíò êîäà HTML, îáðàáàòûâàåò åãî è äîáàâëÿåò íà html-ñòðàíèöó. Ïîäîáíûå ôðàãìåíòû íàçûâàþòñÿ ÷àñòè÷íûìè ïðåäñòàâëåíèÿìè
ìîæåò ïðèíèìàòü òðè ïàðàìåòðà:
-src: url çàãðóæàåìîãî ôàéëà
-onload: îïðåäåëÿåò âûðàæåíèå, êîòîðîå ðåíäåðèòñÿ ïðè çàãðóçêå ôàéëà
-autoscroll: îïðåäåëÿåò, äîïóñêàåòñÿ ëè ïðîêðóòêà âî âðåìÿ çàãðóçêè ôàéëà
<ng-include src="'phonesList.html'"></ng-include>
8 ng-switch - êàê ñòàíäàðòíûé ñâè÷, îïðåäåëèòü ôðàãìåíòû êîäà html ñðàçó æå íà ãëàâíîé ñòðàíèöå è îòîáðàæàòü èõ â çàâèñèìîñòè îò óñëîâèé. Äëÿ ýòîãî ïðåäíàçíà÷åíà äèðåêòèâà 
    <div ng-switch on="data.mode"> - òóò ïåðåäàåòñÿ îáúåêò
    <div ng-switch-when="Tablets"> - òóò âûáèðàåòñÿ ïîêàçûâàòü èëè íåò çíà÷åíèå îáúåêòà data.mode
    <div ng-switch-when="Tablets2"> - òóò âûáèðàåòñÿ ïîêàçûâàòü èëè íåò çíà÷åíèå îáúåêòà data.mode
    <div ng-switch-default>   - ýòî çíà÷åíèå ïî óìîë÷àíèþ
9 ng-style: óñòàíàâëèâàåò ó ýëåìåíòà ñòèëè css
10 ng-class: çàäàåò ýëåìåíòó îïðåäåëåííûé êëàññ
11 ng-class-even: óñòàíàâëèâàåò êëàññ äëÿ ÷åòíûõ ýëåìåíòîâ
12 ng-class-odd: óñòàíàâëèâàåò êëàññ äëÿ íå÷åòíûõ ýëåìåíòîâ
13 ng-hide: ñêðûâàåò ýëåìåíò
14 ng-show: äåëàåò ýëåìåíò âèäèìûì
15 ng-if: çàäàåò äëÿ ýëåìåíòà íåêîòîðîå óñëîâèå
ng-blur: îïðåäåëÿåò ïîâåäåíèå äëÿ ñîáûòèÿ blur, êîòîðîå âîçíèêàåò ïðè ïîòåðå ýëåìåíòîì ôîêóñà
ng-focus: îïðåäåëÿåò ïîâåäåíèå äëÿ ñîáûòèÿ focus, êîòîðîå âîçíèêàåò ïðè ïîëó÷åíèè ôîêóñà ýëåìåíòîì
ng-change: îïðåäåëÿåò ïîâåäåíèå äëÿ ñîáûòèÿ change, êîòîðîå âîçíèêàåò ïðè èçìåíåíèè ýëåìåíòîì ñîñòîÿíèÿ, íàïðèìåð, ïðè íàæàòèè íà ýëåìåíò input type="checkbox"
ng-submit: îïðåäåëÿåò ïîâåäåíèå äëÿ ñîáûòèÿ submit, êîòîðîå âîçíèêàåò ïðè îòïðàâêå ôîðìû
ng-copy/ng-cut/ng-paste: îïðåäåëÿåò ïîâåäåíèå äëÿ ñîáûòèé êîïèðîâàíèÿ, âûðåçêè è âñòàâêè ñîîòâåòñòâåííî
ng-blclick: òà æå ng-click, òîëüêî îáðàáàòûâàåòñÿ äâîéíîå íàæàòèå
ng-mousedown: äëÿ îáðàáîòêè íàæàòèÿ êëàâèøè ìûøè
ng-mouseup: äëÿ îáðàáîòêè îòæàòèÿ ìûøè
ng-mouseenter: äëÿ îáðàáîòêè íàâåäåíèÿ êóðñîðà â îïðåäåëåííóþ îáëàñòü
ng-mouseleave: äëÿ îáðàáîòêè óõîäà êóðñîðà ñ îïðåäåëåííîé îáëàñòè
ng-mousemove: äëÿ îáðàáîòêè ïåðåìåùåíèÿ êóðñîðà ìûøè
ng-keydown: îáðàáîòêà íàæàòèÿ êëàâèøû êëàâèàòóðû
ng-keypress: îáðàáîòêà íàæàòèÿ êëàâèøû êëàâèàòóðû


Ñîçäàíèå ïðîåêòà ñ àíãóëÿðîì æñ è òàéïñêðèïòîì
â ïàïê äîáàâèì ôàéë ïàêàäæà
$ npm init - òóò ïðîñòî ñîçäàåì ôàéë ñ èìåíåì package.json íî ò.ê.  ýòî íå îáû÷íàÿ êîìàíäà ñîçäàíèÿ òî ìû óâèäèì äèàëîã ïî ïîýòàïíîìó ñîçäàíèþ ôàéëà ïàêåòà äëÿ çàãðóçêè âñåãî îñòàëüíîãî
- äîáàâëÿåì òàéïñêðèïò
npm install typescript --save-dev
We use the --save-dev flag so that this dev dependency is saved into the package.json file.
Before we can start using TypeScript we need to install the definition files. Definition files (sometimes referred to as header files in other languages) do not contain any code, rather, they describe the API for a third-party library; whether that is jQuery, React or Angular.
Let's install the TypeScript definitions for Angular
npm install @types/angular --save
ñîçäàäèì tsconfig.json ôàéë è íàïîëíèì åãî
{
  "compilerOptions": {
    "module": "commonjs",
    "target": "es5"
  },
  "files": ["script.ts"]
}
We will have a single script.ts file that will be compiled to script.js, which will be included in our HTML template.
To compile our TypeScript from the root of our application execute the following command:
ò.å. åñëè õîòèì êîìèëèðîâàòü òî ââîäèì ýòî
$ node_modules/.bin/tsc
Äàëüøå ñìîòðåòü ïî ïóíêòàì ïðèìåð
https://brianflove.com/2016/12/26/typing-up-your-angular-1-app/

Ïåðåäà÷à ìåæäó ñîñåäíèìè êîíòðîëëåðàìè
https://benohead.com/blog/2016/07/18/angularjs-sharing-data-controllers/
1 Ìåæäó ñîñåäíèìè êîíðîëëåðìè ñ ïîìîùüþ  "$scope",
â ïåðâîì êîíòîëëåðå 
$rootScope.$broadcast("namechanged", $scope.name); ýòî ãåíåðèðóåò ðàññûëêó ñîîáùåíèé ïî âñåì êîíòðîëëåðàì

ýòî ïîäïèñêà íà ñîáûòèå â ëþáîì êîíòðîëëåðå, ò.å. ìû ïîëó÷èì òðèãåð ñîáûòèÿ ñðàçó æå
$scope.$on("namechanged", function(event, name) {
  $scope.name = name;
});
2 Ïåðåäà÷å ìåæäó áîáûòèÿìè ÷åðåç ñåðâèñ
ñîçäàòü ñåðâèñ ñ ìåòîäîì ãåò è ñåò, íî ìèíóñ â òîì ÷òî íåò òðèãåðà ñîáûòèÿ íóæíî ïðèäóìàòü êàê îáíîâèòü äàííûå è ïîíÿòü ÷òî îíè èçìåíèëèñüá

112/5000
$ broadcast èñïîëüçóåòñÿ äëÿ çàïóñêà ñîáûòèÿ è åãî ðàñïðîñòðàíåíèÿ â òåêóùåé îáëàñòè è ðåêóðñèâíî äëÿ âñåõ äî÷åðíèõ îáëàñòåé
$emit is used to trigger an event and propagate it to the current scope and recursively to all parent scopes
$on is used to listen to event notification on the scope
$watch - ñëåäèò çà èçìåíåíèåì ïåðåìåííûõ â ñâîåì $scope



…or create a new repository on the command line
echo "# AngJsTypeFist" >> README.md
git init
git add *
git commit -m "first commit"
git remote add origin https://github.com/DenisDVG/typescript-angular.git
git push -u origin master

Äëÿ ìåðæà â âèçóàë êîä íóæíî íàáðàòü
ctrl+shift+p

npm run start:dev-evo

http://Kovalev.IG:1GYJaSlm@tfs.parma.ru:8080/tfs/PARMA/GASPS-17/_git/gasps
http://Kovalev.IG:1GYJaSlm@tfs.parma.ru:8080/tfs/PARMA/GASPS-17/_git/gasps

Ôèêñû îøèáîê

âûïàäàëà îøèáêà ñ sass ïðåïðîöåññîðîì, ôèêñàíóë ýòîé ñòðîêîé
npm rebuild --force

ýòî êîìèòèò âñå âîîáùå âñå!
git push --set-upstream origin feature/T190004pr --no-verify
à ýòî íîðìàëüíûé ïóø
git push --set-upstream origin feature/223705_

çàïóñê ñåðâåðà 
npm start âìåñòî ng serve

÷òî áû çàïóñòèòü êîììèò
git commit
÷òî áû ïîòîì çàïóøèòü âåòêó
git push --set-upstream origin feature/211239





ðàçîáðàòü êîä

  private readonly filter$ = new BehaviorSubject<string>('');

  private readonly sliceId$ = new BehaviorSubject<number | undefined>(undefined);

  readonly dataSlices$ = this.selectedEntities$.pipe(
    switchMap(selectedEntities => this.getDataSlices(selectedEntities)),
    shareReplay({ bufferSize: 1, refCount: true }),
  );

  readonly dictItemsFilter: Observable<DictItemsGridItem[]> = this.selectFilteredList();



 private selectFilteredList() {
    const dictItems: Observable<DictItemsGridItem[]> = this.sliceId$.pipe(
      withLatestFrom(this.dataSlices$),
      map(([sliceId, items]) => items.find(item => item.id === sliceId)),
      switchMap(sliceItem => {
        if (
          sliceItem === undefined ||
          sliceItem.dataType !== this.TypeDataSlides.catalog ||
          sliceItem.dictId === null
        ) {
          return of([]);
        }

        return this.loadDictItems(sliceItem.dictId, undefined);
      }),
    );

    const filterDebounceTime = 300;

    const filter$ = this.filter$.pipe(debounceTime(filterDebounceTime));

    return combineLatest([dictItems, filter$]).pipe(
      map(([items, query]) => items.filter(item => item.title.toLocaleLowerCase().indexOf(query.toLowerCase()) >= 0)),
      shareReplay({ bufferSize: 1, refCount: true }),
    );








